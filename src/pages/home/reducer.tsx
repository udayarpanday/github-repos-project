import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import API from "../../helper/index";
import { IRepoData } from "../../interface";


interface IData {
  inProgress: boolean;
  data: IRepoData[];
}

export const initialState:IData = {
  inProgress: false,
  data: [],
};

export const repoDetailsAsync = createAsyncThunk(
  "repo-details-async",
  async ({ searchValue }: { searchValue: string }) => {
    try {
      const repoDetailsResponse = await API.get(
        `https://api.github.com/search/repositories?q=${searchValue}`
      );
      return repoDetailsResponse.data;
    } catch (errors) {
      console.log(`No Data Found >>> ${errors}`);
    }
  }
);

const repoDetailSlice = createSlice({
  name: "leaveDetails",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(repoDetailsAsync.pending, (state) => {
        state.inProgress = true;
      })
      .addCase(repoDetailsAsync.fulfilled, (state, action: any) => {
        state.inProgress = false;
        console.log("Get Repo Details >>> ", action);
        if (action.payload) {
          state.data.push(action.payload)
        }
      });
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});
export const {} = repoDetailSlice.actions;
export default repoDetailSlice.reducer;
