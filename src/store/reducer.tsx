import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import API from "../helper/index";
import { IPageOption, IRepoData, IRepoUserDetails } from "../interface";

interface IData {
  inProgress: boolean;
  repos: IRepoData;
  isDataFetched: boolean;
  userDetails: IRepoUserDetails;
}

interface IUserRepoPayload {
  userName?: string;
  repo?: string;
}

export const initialState: IData = {
  inProgress: false,
  isDataFetched: false,
  repos: {
    incomplete_results: false,
    items: [],
    total_count: 0,
  },
  userDetails: {
    name: "",
    full_name: "",
    owner: {
      login: "",
      html_url: "",
      type: "",
      avatar_url:""
    },
    html_url: "",
    description: "",
    url: "",
    created_at: "",
    updated_at: "",
    pushed_at: "",
    homepage: "",
    language: "",
    visibility: "",
    forks: 0,
    open_issues: 0,
    watchers: 0,
    default_branch: "",
    subscribers_count: 0,
  },
};

//get the list of the repo searched by the user with various page options
export const repoDetailsAsync = createAsyncThunk(
  "repo-details-async",
  async (options: IPageOption) => {
    try {
      const repoDetailsResponse = await API.get(
        `https://api.github.com/search/repositories?q=${options.searchValue}&sort=${options.sortValue}&per_page=${options.itemsPerPage}&order=${options.order}&page=${options.page}`
      );
      return repoDetailsResponse.data;
    } catch (errors) {
      console.log(`No Data Found >>> ${errors}`);
    }
  }
);

//get more details about the user and repo selected
export const userRepoAsync = createAsyncThunk(
  "user-repo-async",
  async (payload: IUserRepoPayload) => {
    try {
      const userRepoResponse = await API.get(
        `https://api.github.com/repos/${payload.userName}/${payload.repo}`
      );
      return userRepoResponse.data;
    } catch (errors) {
      console.log(`No Data Found >>> ${errors}`);
    }
  }
);

const repoDetailSlice = createSlice({
  name: "repo-details",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(repoDetailsAsync.pending, (state) => {
        state.inProgress = true;
      })
      .addCase(repoDetailsAsync.fulfilled, (state, action: any) => {
        state.isDataFetched = true;
        state.inProgress = false;
        console.log("Get Repo Details >>> ", action);
        if (action.payload) {
          state.repos = action.payload;
        }
      })
      .addCase(repoDetailsAsync.rejected, (state, action: any) => {
        state.inProgress = false;
        state.isDataFetched=false;
        console.log("Get Repo Details Error >>> ", action);
      })
      .addCase(userRepoAsync.pending, (state) => {
        state.inProgress = true;
      })
      .addCase(userRepoAsync.fulfilled, (state, action: any) => {
        state.inProgress = false;
        console.log("Get User Repo Details >>> ", action);
        if (action.payload) {
          state.userDetails = action.payload;
        }
      });
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});
export const {} = repoDetailSlice.actions;
export default repoDetailSlice.reducer;
